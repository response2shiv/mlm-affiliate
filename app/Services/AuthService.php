<?php

namespace App\Services;

use App\Helpers\Util;
use App\Helpers\ApiHelper;
use Cache;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Session;
use Log;

class AuthService
{
    /**
     * @param array $data
     * @return bool|\Psr\Http\Message\ResponseInterface
     * @throws \Exception
     */
    public function login(array $data)
    {
        $form_params = [
            'username' => $data['username'],
            'password' => $data['password'],
            'current_ip' => Util::get_client_ip()
        ];

        $res = ApiHelper::request('POST', '/affiliate/login', $form_params);
        
        if ($res->getStatusCode() === 200) {
            // Stores additional user data to the session
            $this->storesUserData(json_decode($res->getBody())->data);

            // Stores the access token on a session variable to use later
            $this->storesAccessToken(json_decode($res->getBody())->data->token);

            $data['username'] = json_decode($res->getBody())->data->user->username;
            // Returns if the user was authenticate successfully
            return $this->authenticates($data);
        } else {
            return json_decode($res->getBody());
        }
    }

    /**
     * Starts the user session.
     *
     * @param array $data
     * @return bool
     */
    public function authenticates(array $data): bool
    {
        try {
            return Auth::attempt([
                'username' => $data['username'],
                'password' => $data['password']
            ], $data['remember']);
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * Finish the user session.
     */
    public function logout()
    {
        Auth::logout();
    }

    /**
     * Stores the token on a session.
     *
     * @param string $token
     */
    private function storesAccessToken(string $token): void
    {
        session()->put('token', $token);
    }

    /**
     * @return string
     */
    private function getAccessToken(): string
    {
        return session()->get('token');
    }

    /**
     * @param object $data
     */
    public static function storesUserData(object $data): void
    {
        session()->put('first_name', $data->user->firstname);
        session()->put('last_name', $data->user->lastname);
        session()->put('pv', $data->pv);
        session()->put('rank', $data->achieved_rank_desc);
        session()->put('profile_image_url', $data->user->profile_image_url);
    }
    
    /**
     * @param array $data
     * @return bool|\Psr\Http\Message\ResponseInterface
     * @throws \Exception
     */
    public function loginSSO($distid, $token)
    {
        //$distid,//distid of the ambassador
        //$token//token that was generated by the admin portal saved on user_auth_sso_token
        // Log::info("Request being called by API -> /affiliate/admin-sso/".$distid.'/'.$token);
        $res = ApiHelper::request('GET', '/affiliate/admin-sso/'.$distid.'/'.$token, array());
        
        // Log::info("Response",array(json_decode($res->getBody())->data));
        if ($res->getStatusCode() === 200) {
            //Authenticate the use by the id
            Auth::loginUsingId(json_decode($res->getBody())->data->user->id);
            
            Log::info("Response", array(json_decode($res->getBody())->data));
            // Stores additional user data to the session
            $this->storesUserData(json_decode($res->getBody())->data);

            // Stores the access token on a session variable to use later
            $this->storesAccessToken(json_decode($res->getBody())->data->token);

            $data['username'] = json_decode($res->getBody())->data->user->username;
            // Returns if the user was authenticate successfully
            //return $this->authenticates($data);
            
            // dd(array(json_decode($res->getBody())->data));
            return true;
        } else {
            Log::info("Response - failed, Invalid token");
            //return redirect('login')->withErrors(['errors' => "This account has restricted access.  Please contact customer service at support@ncrease.com"]);
            return false;
        }
    }
}
